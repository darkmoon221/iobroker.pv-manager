{
  "version": 3,
  "sources": ["../../src/lib/cronJobs.ts"],
  "sourcesContent": ["import {CronJob} from 'cron';\r\nimport {PvManager} from '../main';\r\nimport {Notifier} from './notifier/notifier.interafce';\r\nimport {StateUtils} from './stateUtils';\r\n\r\nexport class CronJobs {\r\n\r\n    private readonly adapter: PvManager;\r\n    private readonly notifier: Notifier;\r\n\r\n    cronExpression = '0 0 * * *';\r\n    timezone = 'Europe/Berlin';\r\n\r\n    historyPrefix = 'history.';\r\n\r\n    constructor(pvManager: PvManager, notifier: Notifier) {\r\n        this.adapter = pvManager;\r\n        this.notifier = notifier;\r\n    }\r\n\r\n    async createDailyAtMidnight(): Promise<void> {\r\n\r\n        this.adapter.log.debug('Create daily cron job at midnight: ' + this.cronExpression);\r\n\r\n        new CronJob(\r\n            this.cronExpression,\r\n            () => this.createStatisticsForLastDay(),\r\n            () => this.adapter.log.debug('cron job stopped'),\r\n            true,\r\n            this.timezone\r\n        );\r\n    }\r\n\r\n    createStatisticsForLastDay(): void {\r\n        this.initializeYesterday().then((state) => {\r\n            this.adapter.log.debug('Created state: ' + state);\r\n\r\n            this.adapter.getStateAsync('cumulated').then((data) => {\r\n                this.adapter.log.debug('Copy state: ' + data);\r\n\r\n                if (data && data.val) {\r\n                    const value = data?.val;\r\n                    this.adapter.log.debug('Set state: ' + value);\r\n                    StateUtils.setStateWithAck(this.adapter, state, value.toString()).then(() => {\r\n                        if (this.adapter.config.sendNotifications) {\r\n                            this.notifier.sendNotification(value.toString()).then();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    async initializeYesterday(): Promise<string> {\r\n        const yesterday = new Date(new Date().setDate(new Date().getDate() - 1));\r\n\r\n        const state = this.historyPrefix + yesterday.getFullYear() + '.' + (yesterday.getMonth() + 1) + '.' + yesterday.getDate();\r\n\r\n        await this.adapter.setObjectNotExistsAsync(state, {\r\n            type: 'state',\r\n            common: {\r\n                name: state,\r\n                type: 'object',\r\n                role: 'variable',\r\n                read: true,\r\n                write: true\r\n            },\r\n            native: {},\r\n        });\r\n        return Promise.resolve(state);\r\n    }\r\n\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAsB;AAGtB,wBAAyB;AAElB,MAAM,SAAS;AAAA,EAUlB,YAAY,WAAsB,UAAoB;AALtD,0BAAiB;AACjB,oBAAW;AAEX,yBAAgB;AAGZ,SAAK,UAAU;AACf,SAAK,WAAW;AAAA,EACpB;AAAA,EAEA,MAAM,wBAAuC;AAEzC,SAAK,QAAQ,IAAI,MAAM,wCAAwC,KAAK,cAAc;AAElF,QAAI,oBACA,KAAK,gBACL,MAAM,KAAK,2BAA2B,GACtC,MAAM,KAAK,QAAQ,IAAI,MAAM,kBAAkB,GAC/C,MACA,KAAK,QACT;AAAA,EACJ;AAAA,EAEA,6BAAmC;AAC/B,SAAK,oBAAoB,EAAE,KAAK,CAAC,UAAU;AACvC,WAAK,QAAQ,IAAI,MAAM,oBAAoB,KAAK;AAEhD,WAAK,QAAQ,cAAc,WAAW,EAAE,KAAK,CAAC,SAAS;AACnD,aAAK,QAAQ,IAAI,MAAM,iBAAiB,IAAI;AAE5C,YAAI,QAAQ,KAAK,KAAK;AAClB,gBAAM,QAAQ,6BAAM;AACpB,eAAK,QAAQ,IAAI,MAAM,gBAAgB,KAAK;AAC5C,uCAAW,gBAAgB,KAAK,SAAS,OAAO,MAAM,SAAS,CAAC,EAAE,KAAK,MAAM;AACzE,gBAAI,KAAK,QAAQ,OAAO,mBAAmB;AACvC,mBAAK,SAAS,iBAAiB,MAAM,SAAS,CAAC,EAAE,KAAK;AAAA,YAC1D;AAAA,UACJ,CAAC;AAAA,QACL;AAAA,MACJ,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA,EAEA,MAAM,sBAAuC;AACzC,UAAM,YAAY,IAAI,KAAK,IAAI,KAAK,EAAE,QAAQ,IAAI,KAAK,EAAE,QAAQ,IAAI,CAAC,CAAC;AAEvE,UAAM,QAAQ,KAAK,gBAAgB,UAAU,YAAY,IAAI,MAAO,WAAU,SAAS,IAAI,KAAK,MAAM,UAAU,QAAQ;AAExH,UAAM,KAAK,QAAQ,wBAAwB,OAAO;AAAA,MAC9C,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,MACA,QAAQ,CAAC;AAAA,IACb,CAAC;AACD,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAEJ;",
  "names": []
}
